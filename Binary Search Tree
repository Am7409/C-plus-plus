The Binary Search tree is the type of tree in which the left subtree is smaller than the root value and the right subtree is greater than the root value;
It is created using by the singley linked list;
Now the code to implement it on the compiler

              #include <bits/stdc++.h>

              using namespace std;

              class node{
                  public:
                  int data;
                  node* right;
                  node* left;
                  node(int d){
                      this->data=d;
                      this->left=NULL;
                      this->right=NULL;
                  }
              };
              node* insert(node* &root,int val){
                  if(root==NULL){
                      root = new node(val);
                     return root;
                  }
                  else if(val<root->data){
                      root->left=insert(root->left,val);
                  }
                  else if(val>root->data){
                      root->right=insert(root->right,val);
                  }
                  return root;
              }
              void print(node* root){
                  if(root==NULL){
                      return;
                  }
                  cout<<root->data<<" ";
                  print(root->left);
                  print(root->right);
              }
              int main()
              {
                  node* root=NULL;
                  root=insert(root,45);
                 root=insert(root,4);
                 root=insert(root,65);
                 root=insert(root,40);
                 root=insert(root,450);

                  print(root);

                  return 0;
              }


 Q2 : Predecessor and Successor
    //Approches
      //App1 : For this we have to find the pre value of the given key in the preorder tree
               So to find this for finding the predecessor we have first go to the left from the key and than go to the extreem right 
               And find the successor we have to firstly go to the right and go to the extreem left so that to find out the successor 
               and if the given key is greater than we have to update the successor and than to solve the case of the leaf node;
               
      //Solutions
         Node* inpre(Node* root){
            Node* temp=root->left;
            while(temp->right!=NULL){
                temp=temp->right;
            }
            return temp;
        }
        Node* insuc(Node* root){
            Node* temp=root->right;
            while(temp->left!=NULL){
                temp=temp->left;
            }
            return temp;
        }
        void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
        {

        // Your code goes here

        if(root==NULL){
            return;
        }
        if(root->key == key){
            if(root->left) pre=inpre(root);
            if(root->right) suc=insuc(root);
            return;
        }
        if(key > root->key){
            pre=root;
            findPreSuc(root->right,pre,suc,key);
        }
        else if(key < root->key){
            suc=root;
            findPreSuc(root->left,pre,suc,key);
        }

        }


Q3: k-th smallest element in BST 
   //Approches
      //App1 : for this we use the inorder property to solve this question
               to this we have to in place of the printing the value we have to use the check whether and than increase the counter so that we have to 
               check it is equal to the given counter;
      //Solutions
         int solve(Node* root, int k, int &count){
        if(root==NULL){
            return -1;
        }
        int left= solve(root->left,k,count);
        if(left!=-1)
           return left;
           count++;
        if(count==k)
           return root->data;
        
        return solve(root->right,k,count);
    }
    int KthSmallestElement(Node *root, int K) {
        // add code here.
        int c=0;
        return solve(root,K,c);
    }


Q 4: Lowest Common Ancestor in a BST
   //Approches
     //App1 for this we have tom find out the LCA by just finding the comman point of the nodes
       //Solutions
           Node* LCA(Node *root, int n1, int n2)
            {
               //Your code here
                if(root->data>n1&root->data>n2)return LCA(root->left,n1,n2);

               if(root->data<n1&root->data<n2)return LCA(root->right,n1,n2);

               return root;

            }
