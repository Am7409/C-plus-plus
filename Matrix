//Q1: Set Matrix Zeroes
  //Approches
    //App1: 
      1: In this problem we have to use the O(1) space so for this we have to make a indecator matrix inside the given matrix at the 0th postion of both the mXn sides.
      2: We have to make the two marker for to search that if there any zero present in the statring rows or columns, and than if yes than marks them for the future refrence
         than we have to check the matrix of the n-1 and m-1 part of the matrix, at this part we have find the cell which contains the zero and if zero if found in any cell 
         than mark the particulars cell's zeroth row and columns zero for the future use.
      3: After this make a row centric loop and check if the mat[i][0]=0 than the whole row is zero and similary the columns centric also. 
      4: And at the last check if the varabiles we check first if there values are zero than check the whole zeroth row and columns zero. 
        //Solutions: 
           void setZeroes(vector<vector<int>>& matrix) {
                    int x=1;
                    int y=1;
                    int m=matrix.size();
                    int n=matrix[0].size();
                    for(int i=0;i<m;i++){
                        if(matrix[i][0]==0){
                            y=0;
                        }
                    }
                     for(int j=0;j<n;j++){
                        if(matrix[0][j]==0){
                            x=0;
                        }
                    }
                     for(int i=1;i<m;i++){
                         for(int j=1;j<n;j++){
                             if(matrix[i][j]==0){
                                 matrix[0][j]=0;
                                 matrix[i][0]=0;
                             }
                        }
                    }
                    for(int i=1;i<m;i++){
                        if(matrix[i][0]==0){
                            for(int j=0;j<n;j++){
                                matrix[i][j]=0;
                            }
                        }
                    }
                    for(int j=1;j<n;j++){
                        if(matrix[0][j]==0){
                            for(int i=0;i<m;i++){
                                matrix[i][j]=0;
                            }
                        }
                    }
                    if(y==0){
                        for(int i=0;i<m;i++){
                            matrix[i][0]=0;
                        }
                    }
                    if(x==0){
                        for(int j=0;j<n;j++){
                            matrix[0][j]=0;
                        }
                    }
                }
                
                
//Q2: Word Search 
  //Approches: 
    //Appp1:  In this first we have to check from where the string was strated and than we have to check the conditions for the finding the other string members.
              for this first check all the pointer must inside the boundry and check the condtions using the recursion methods.
                         /* In this problem, we need to search if a given word exists inside a board[][] of characters
                            From one cell, we can move into it's 4 adjacent cells in the following directions - Down , Right , Up , Left
                            We cannot use one cell for more than once. Thus, backtracking comes into the picture*/
      //Solution:
          class Solution {
          private:

          bool search(int i , int j , int n , int m , vector<vector<char>> &board , string &word , int k)
          {
              // If k is equal to the given word's length, it means every character of word is present inside board[][], so we return true

              if(k == word.size() )
                 return true ;

              // If we are moving outside the board's boundary or if board[i][j] is not equal to word[k] , we return false

              if(i < 0 || j < 0 || i == n || j == m  || board[i][j] != word[k])
                  return false ;

              // We store the Character present in the current Cell inside ch variable 

              char ch = board[i][j] ;

              // We change board[i][j] to # so that we don't visit the Same Cell again

              board[i][j] = '#' ;

              // We move in Downward direction

              bool op1 = search(i + 1 , j , n , m , board , word , k + 1) ;

              // We move in Rightward direction

              bool op2 = search(i , j + 1 , n , m , board , word , k + 1) ;

              // We move in Upward direction

              bool op3 = search(i - 1 , j , n , m , board , word , k + 1) ;

              // We move in Leftward direction

              bool op4 = search(i , j - 1 , n , m , board , word , k + 1) ;

              // We backtrack and change the value of board[i][j] to it's original character stored in ch variable

              board[i][j] = ch ;

              // As we need to find the word, no matter from which direction we get it, so we return (op1 OR op2 OR op3 OR op4)

              return op1 || op2 || op3 || op4 ;
          }

          public:
              bool exist(vector<vector<char>>& board, string &word) {

              int n = board.size() ;
              int m = board[0].size() ;


              for(int i = 0 ; i < n ; i++)
              {
                  for(int j = 0 ; j < m ; j++)
                  {
                      // We start checking only if board[i][j] matches with word[0]

                      if(board[i][j] == word[0] )
                      {
                          // If our search results return True, we directly return true 

                          if(search(i , j , n , m , board , word , 0) )
                              return true ;
                      }
                  }
              }

              // Otherwise, if we searched the entire matrix and still didn't find the word, we return false 

              return false ; 
          }
          };

          /*
          Time Complexity:  O(N * M * 4^K)
          Space Complexity: O(K)
          K = word.size()
          */
              
              
//Q3: Find a common element in all rows of a given row-wise sorted matrix
   //approches:
      //App1:  Step1:  Create a Hash Table with all key as distinct elements 
               of row1. Value for all these will be 0.
                Step2:  
                For i = 1 to M-1
                 For j = 0 to N-1
                  If (mat[i][j] is already present in Hash Table)
                   If (And this is not a repetition in current row.
                      This can be checked by comparing HashTable value with
                      row number)
                         Update the value of this key in HashTable with current 
                         row number
                Step3: Iterate over HashTable and print all those keys for 
                       which value = M 
        //Solutiuon: 
          #include <bits/stdc++.h>
          using namespace std;

          // Specify number of rows and columns
          #define M 4
          #define N 5

          // Returns common element in all rows of mat[M][N]. If there is no
          // common element, then -1 is returned
          int findCommon(int mat[M][N])
          {
              // A hash map to store count of elements
              unordered_map<int, int> cnt;

              int i, j;

              for (i = 0; i < M; i++) {

                  // Increment the count of first
                  // element of the row
                  cnt[mat[i][0]]++;

                  // Starting from the second element
                  // of the current row
                  for (j = 1; j < N; j++) {

                      // If current element is different from
                      // the previous element i.e. it is appearing
                      // for the first time in the current row
                      if (mat[i][j] != mat[i][j - 1])
                          cnt[mat[i][j]]++;
                  }
              }

              // Find element having count equal to number of rows
              for (auto ele : cnt) {
                  if (ele.second == M)
                      return ele.first;
              }

              // No such element found
              return -1;
          }
           
           
//Q4: Create a matrix with alternating rectangles of O and X
   //Approches: 
      //App1: 1: In this approch we can use the spiral matrix method. 
              2: we make a new matriex to store the 'x' and '0' into it and than triverse it spirally and than print the matrix.
         //Solutions:
           #include <bits/stdc++.h>
            using namespace std;
            int main() {
                // Write C++ code here
                int m,n;
                cin>>n>>m;
                int rs=0,re=n-1;
                int cs=0,ce=m-1;
                char a[n][m];
                int count=0;
                char c='x';
                while(count<m*n){
                    for(int i=cs;i<=ce and count<m*n;i++){
                        a[rs][i]=c;
                        count++;
                    }
                    rs++;
                    for(int i=rs;i<=re and count<m*n;i++){
                        a[i][ce]=c;
                        count++;
                    }
                    ce--;
                    for(int i=ce;i>=cs and count<m*n;i--){
                        a[re][i]=c;
                        count++;
                    }
                    re--;
                    for(int i=re;i>=rs and count<m*n;i--){
                        a[i][cs]=c;
                        count++;
                    }
                    cs++;
                    if(cs%2!=0){
                        c='0';
                    }
                    else
                      c='x';
                }
               for(int i=0;i<n;i++){
                  for(int j=0;j<m;j++)
                    cout<<a[i][j]<<" ";
                   cout<<endl;
               }
                return 0;
            }
