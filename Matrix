//Q1: Set Matrix Zeroes
  //Approches
    //App1: 
      1: In this problem we have to use the O(1) space so for this we have to make a indecator matrix inside the given matrix at the 0th postion of both the mXn sides.
      2: We have to make the two marker for to search that if there any zero present in the statring rows or columns, and than if yes than marks them for the future refrence
         than we have to check the matrix of the n-1 and m-1 part of the matrix, at this part we have find the cell which contains the zero and if zero if found in any cell 
         than mark the particulars cell's zeroth row and columns zero for the future use.
      3: After this make a row centric loop and check if the mat[i][0]=0 than the whole row is zero and similary the columns centric also. 
      4: And at the last check if the varabiles we check first if there values are zero than check the whole zeroth row and columns zero. 
        //Solutions: 
           void setZeroes(vector<vector<int>>& matrix) {
                    int x=1;
                    int y=1;
                    int m=matrix.size();
                    int n=matrix[0].size();
                    for(int i=0;i<m;i++){
                        if(matrix[i][0]==0){
                            y=0;
                        }
                    }
                     for(int j=0;j<n;j++){
                        if(matrix[0][j]==0){
                            x=0;
                        }
                    }
                     for(int i=1;i<m;i++){
                         for(int j=1;j<n;j++){
                             if(matrix[i][j]==0){
                                 matrix[0][j]=0;
                                 matrix[i][0]=0;
                             }
                        }
                    }
                    for(int i=1;i<m;i++){
                        if(matrix[i][0]==0){
                            for(int j=0;j<n;j++){
                                matrix[i][j]=0;
                            }
                        }
                    }
                    for(int j=1;j<n;j++){
                        if(matrix[0][j]==0){
                            for(int i=0;i<m;i++){
                                matrix[i][j]=0;
                            }
                        }
                    }
                    if(y==0){
                        for(int i=0;i<m;i++){
                            matrix[i][0]=0;
                        }
                    }
                    if(x==0){
                        for(int j=0;j<n;j++){
                            matrix[0][j]=0;
                        }
                    }
                }
                
                
//Q2: Word Search 
  //Approches: 
    //Appp1:  In this first we have to check from where the string was strated and than we have to check the conditions for the finding the other string members.
              for this first check all the pointer must inside the boundry and check the condtions using the recursion methods. 
      //Solution:
              bool solve(vector<vector<char>>& board, string &word,int i,int j,int k){
                  if(k==word.size()){
                      return true;
                  }
                  if(i<0 or j<0 or i==board.size() or j==board[0].size() or board[i][j]!=word[k]) 
                      return false;
                  char c=board[i][j];
                  board[i][j]='*';
                  bool op1=solve(board,word,i+1,j,k+1);
                  bool op2=solve(board,word,i,j+1,k+1);
                  bool op3=solve(board,word,i-1,j,k+1);
                  bool op4=solve(board,word,i,j-1,k+1);
                  board[i][j]=c;
                  return op1 or op2 or op3 or op4;
              }
              bool exist(vector<vector<char>>& board, string word) {
                  for(int i=0;i<board.size();i++){
                      for(int j=0;j<board[0].size();j++){
                          if(board[i][j]==word[0] and solve(board,word,i,j,0)){
                              return true;
                          }
                      }
                  }
                  return false;
              }
              
              
//Q3:               
                
