This is type of Data Strcuter or a combination of edges and nodes .

Q1 Implemantion of graph in the adjecny list form

        //Solution
          #include <bits/stdc++.h>
          using namespace std;

          class graph{
            public: 
             unordered_map<int,list<int>> mp;
            void insertEgde(int u,int v, bool direction){
                //If Direction = 0 -> undirected
                // If Deriection = 1 -> undirected
                mp[u].push_back(v);
                if(direction==0){
                    mp[v].push_back(u);
                }
            }

            void printAdjecylist(){
                for(auto it:mp){
                    cout<<it.first <<" : ";
                    for(auto i:it.second){
                        cout<<i <<", ";
                    }
                    cout<<endl;
                }
            }

          };
          int main() {
            int n,m;
            cout<<"Enter the number of Nodes : ";
            cin>>n;
            cout<<"\nEnter the Number of Edges : ";
            cin>>m;
            graph g;
            for(int i=0;i<m;i++){
                int u,v;
                cin>>u>>v;
                g.insertEgde(u,v,0);
            }
            cout<<endl;
            g.printAdjecylist();
            return 0;
          }


Q2: BFS of graph
   //Aproches
     //App1: For this we have to take the queue to store the nodes and its neighbour and a visited map for the replacing the chance of infinte loop between any
              printed node in the ans array;
              Firstly we have to store the first node and than store all it's neighbour in the queue and pop the front element from the queue and store it into the 
              ans vector;
              and also check any neighbour is also there which is in front of the queue;
              
              //Solutins
              
                vector<int> bfsOfGraph(int V, vector<int> adj[]) {
                        // Code here
                        unordered_map<int,bool> vis;
                        vector<int> ans;
                        queue<int> q;
                        q.push(0);
                        vis[0]=true;
                        while(q.size()>0){
                            int cur=q.front();
                            q.pop();
                            ans.push_back(cur);
                            for(auto i:adj[cur]){
                                if(vis[i]==false){
                                q.push(i);
                                    vis[i]=true;
                                }
                            }
                        }
                        return ans;
                    }


Q3: DFS of Graph
   //approches
      //App1 for this we have to solve by recursion 
             firstly we create a loop and in that we have to check each node on the graph 
             and than check into the more depth and in the function if the node's neighbur is not visited than mark it visited and check the same condition for its
               neighbour 
               
          //Sloutions 
             void solve(unordered_map<int,bool> &vis,vector<int> &ans,vector<int> adj[],int i){
                                 ans.push_back(i);
                                 vis[i]=true;
                                 for(auto it:adj[i]){
                                     if(!vis[it]){
                                         solve(vis,ans,adj,it);
                                     }
                                 }
                                 }
                            vector<int> dfsOfGraph(int V, vector<int> adj[]) {
                                // Code here
                                unordered_map<int,bool> vis;
                                vector<int> ans;
                                for(int i=0;i<V;i++){
                                    if(vis[i]==false){ 
                                        solve(vis,ans,adj,i);
                                    }
                                }
                                return ans;
                            }


Q4: Detect cycle in an undirected graph
    //Approcehs 
       //App1 this is by the bfs approach
              in this we same doing as we are do in the bfs but in this one more condition is also added that is if the visited is true for a node and it's parent is not
                equal to it's current node in the queue than the cycle is present in the graph
             //Solution 
                  bool iscyclic(int i,unordered_map<int,bool> &vis,vector<int>adj[] ){
                            queue<int> q;
                            unordered_map<int,int> part;
                            vis[i]=true;
                            part[i]=-1;
                            q.push(i);
                            while(q.empty()){
                                int cur=q.front();
                                q.pop();
                                for(auto it:adj[cur]){
                                if(vis[it]==true and part[cur]!=it){
                                    return true;
                                }
                                else if(!vis[it]){
                                    q.push(it);
                                    vis[it]=true;
                                    part[it]=cur;
                                }
                            }
                            }
                            return false;
                        }
                            bool isCycle(int V, vector<int> adj[]) {
                                // Code here
                                //Dection of cycle using the BFS way 
                                unordered_map<int,bool> vis;
                                unordered_map<int,list<int>> mp;
                               //to handle the dosconneced componants
                               for(int i=0;i<V;i++){
                                   if(vis[i]==0){
                                       if(iscyclic(i,vis,adj)){
                                           return true;
                                       }
                                   }

                               }
                                return false;
                            }
             
             
             //Approch 2 this is doing by the DFS approach 
               This is also same as that of DFS and just one add up is if the visited is true for a node and it's parent is not
                equal to it's current node than the cycle is present in the graph
                    //Solution 
                      bool detectdfs(vector<int> adj[],int vis[] ,int i,int part){
                                vis[i]=1;
                                for(auto it:adj[i]){
                                    if(!vis[it]){
                                        if(detectdfs(adj,vis,it,i)){
                                            return true;
                                        }
                                    }
                                    else if(it!=part) {
                                        // this means that cycle is present 
                                        return true;
                                    }
                                }
                                return false;
                            }

                          public:
                            bool isCycle(int V, vector<int> adj[]) {
                                int vis[V] = {0};
                                for(int i = 0 ; i < V ; i++) {
                                    if(vis[i] == 0) {
                                        if(detectdfs(adj , vis , i,-1)) return true;
                                    }
                                }
                                return false;
                            }


Q5: Detect cycle in a directed graph
    //Approches 
       //Approch 1 this is doing by the DFS approach 
               This is also same as that of DFS and just one add up is if the visited is true for a node and it's parent is
                equal to it's current node than the cycle is present in the graph
                    //Solution 
                      bool checkcycle(int i, unordered_map<int,bool> &vis,unordered_map<int,bool> &dfscheck,vector<int> adj[]){
                                vis[i]=true;
                                dfscheck[i]=true;
                                for(auto it:adj[i]){
                                    if(!vis[it]){
                                        if(checkcycle(it,vis,dfscheck,adj)){
                                            return true;
                                        }
                                    }
                                    else if(dfscheck[it]) {
                                       return true;    
                                    }
                                }
                                dfscheck[i]=false;
                                return false;
                            }
                            bool isCyclic(int V, vector<int> adj[]) {
                                // code here
                                //call dfs through for all componants
                                unordered_map<int,bool> vis;
                                unordered_map<int,bool> dfsvis;

                                for(int i=0;i<V;i++){
                                    if(!vis[i]){
                                        if(checkcycle(i,vis,dfsvis,adj)){
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            }
            
            //App2 this is doing by the BFS approach 
                  we can also use the topolgical sort if the topological sort is return the sorted graph that means that the cycle is prsent in the graph 
                  So we use the kahn's algo to find this 
            //Solution 
                 

Q6: Topological sort  :- this sorting technique is onliy applied in the directed graph and also in the graph there is no cycle is present;
  //Approches 
    //App1: By using the DFS
             In this we have to call the all the neighbour of the particular node and mark all of them visited 
             And if there is condition where we dont move further than we have to store that node into the stack and that's how your soritng is complete
             
         //Solutions
             void topological(unordered_map<int,bool> &vis,int i,vector<int> adj[],stack<int> &s){
                            vis[i]=true;
                            for(auto it:adj[i]){
                                if(!vis[it]){
                                    vis[it]=true;
                                    topological(vis,it,adj,s);
                                }
                            }
                            s.push(i);
                        }
                        vector<int> topoSort(int V, vector<int> adj[]) 
                        {
                            // code here
                            //Main calling topological function for all componanas in the graph 
                            unordered_map<int,bool> vis;
                            stack<int> s;
                            for(int i=0;i<V;i++){
                                if(!vis[i]){
                                    topological(vis,i,adj,s);
                                }
                            }
                            vector<int> ans;
                            while(!s.empty()){
                                ans.push_back(s.top());
                                s.pop();
                            }
                            return ans;
                        }
                        
                        
        //App2 Using the BFS or Kahn's Algorithim
              In this have to use the conscept of indegree not the visited one in which we have to push the node into the answere vector whose indegree is 0 
              and firstly we have to push the node into the queue and than the answer vector
              
              //Solution
                  	vector<int> topoSort(int V, vector<int> adj[]) 
                                {   //This is using the kahn's alogrithim
                                    // code here
                                    //find the all the node's indegree 
                                    vector<int> indegree(V,0);
                                    for(int i=0;i<V;i++){
                                        for(auto j:adj[i]){
                                            indegree[j]++;
                                        }
                                    }
                                    //0 degree walo loi push karo
                                    queue<int> q;
                                    for(int i=0;i<V;i++){
                                        if(indegree[i] ==0){
                                            q.push(i);
                                        }
                                    }

                                    //Now appling the bfs algorithim 
                                    vector<int> ans;
                                    while( !q.empty()){
                                        auto cur = q.front();
                                        q.pop();

                                    //store the ans
                                    ans.push_back(cur);

                                    for(auto &it:adj[cur]){
                                        indegree[it]--;
                                        if(indegree[it]==0){
                                            q.push(it);
                                        }
                                    }
                                }
                                    return ans;
                                }
               
       
       
Q7: Shortest path in an unweighted graph
     //Approches
         //App1 In this we use the BFS algorithim to find the shortest path 
                For this we have to take the partent map and in that we have to mark the parent of every node and the cach is that the desitnation parent is marked which
                shortest distance among all
                  //Solution 
                      #include <unordered_map> 
                        #include <queue>
                        #include <list>
                        vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){

                                unordered_map <int , list<int>  > adj ;    for ( int i = 0 ; i < edges.size() ; i++ ) {       int u = edges[i].first ;       int v = edges[i].second ;              adj[u].push_back(v) ;       adj[v].push_back(u) ;   }  

                            //Appling the bfs algo 
                            unordered_map<int , bool> visited ;    unordered_map <int,int> parent ;    queue<int> q ;    q.push(s) ;   parent[s] = -1 ;    visited[s] = true ;       while ( !q.empty() ) {       int front = q.front() ;       q.pop() ;              for ( auto i : adj[front] ) {           if ( !visited[i] ) {           visited[i] = true ;            parent[i] = front ;            q.push(i) ;  }   }  }

                            //prepare the shortest node
                             vector <int> ans ;          int currentNode = t ;          ans.push_back(t) ;

                            while ( currentNode != s )     {         currentNode = parent[currentNode] ;         ans.push_back(currentNode) ;              }          reverse (ans.begin() , ans.end()) ;         return ans ;  }


Q8: Shortest path in a directed acyclic graph
     //Approches
           What is the first approach that comes to our mind? Don’t think about any optimizations for now. The first solution that will strike anybody’s mind is from the given ‘src’ node to find the shortest path to each node one by one. For all paths from source to a particular destination node, we will choose the shortest path.

                        Let’s walk through this solution in the above example. 
                        So the given Source node is 1. Say Tsrc - desti → denotes the ith path from the ‘src’ node to a particular destination node.
                        For dest = 0,
                        There is no path, so the shortest path has weight INF.
                        For dest = 1,
                        There is no external path, but the distance from ‘src’ - ‘src’ is trivial, i.e., = 0.
                        For dest  = 2,
                        T1 - 21 = 1 -> 2, it’s the only path from ‘src’ node to dest node, hence shortest path has weight = 2.  
                        For dest  = 3,
                        T1 - 31 = 1 -> 3, it has distance = 6
                        T1 - 32 = 1 -> 2 -> 3, it has distance = 9
                        So the shortest distance of the 2 paths is 6.
                        For dest  = 4,
                        T1 - 41 = 1 -> 3 -> 4, it has distance = 5
                        T1 - 42 = 1 -> 2 -> 3 -> 4, it has distance = 8
                        T1 - 43 = 1 -> 2 -> 4, it has distance = 6
                        So the shortest distance of the 3 paths is 5.
                        For dest  = 5
                        T1 - 51 = 1 -> 2->5, it has distance = 4
                        T1 - 52 = 1 ->  3 -> 4 -> 5, it has distance = 3
                        T1 - 53 = 1 -> 2 -> 3 -> 4 -> 5, it has distance = 6
                        T1 - 54 = 1 -> 2 -> 4 -> 5, it has distance = 4
                        So the shortest distance of the 4 paths is 3.
                        So we will compute the distances from the given ‘src’ node to all other nodes in a similar manner as we walked through the example.
                        Hence now we can formulate our approach for the brute-force approach:
                        For a particular node, compute distances of all possible paths from the given ‘src’ node.
                        From the calculated distances, find the minimum of them.
                        Repeat the same process for all the other nodes in the DAG
             //Sloution
                 #include <bits/stdc++.h>
                using namespace std;
                // Graph class implemented using an adjacency list
                class Graph{
                public:
                    int V;  // Number of Vertices
                    int E;  // Number of Edges
                    vector<pair<int, int>> *adj; // adjacency list
                    Graph(int num_vertices, int num_edges){
                        this->V = num_vertices;
                        this->E = num_edges;
                        this->adj = new vector<pair<int, int>>[num_vertices];
                    }
                    // function to add Edge
                    void addEdge(int u, int v, int w){
                        adj[u].push_back({v, w});
                    }

                    // function that returns the topSort ordering of nodes in a graph
                    vector<int> topSort(int src){
                      //inDegree vector
                        vector<int> indegree(V, 0);
                        // update the indegree of each node in the graph
                        for(int i=0;i<V;++i){
                            for(pair<int, int> node:this->adj[i]){
                                indegree[node.first]++;
                            }
                        }
                        // queue 
                        queue<int> q;
                        // push all nodes with 0 in degree in the queue
                        for(int i=0;i<V;++i){
                            if(indegree[i]==0)
                                q.push(i);
                        }
                        // vector to store topSortOrdering        
                        vector<int> topSortOrdering;
                        // run until queue is empty
                        while(!q.empty()){
                            // pop the front node
                            int u = q.front();
                            q.pop();
                            // since it has 0 indegree it will occur before all elements 
                            // with non-0 indegree currently
                            topSortOrdering.push_back(u);
                            // decrement the indegree of adjacent nodes of the popped node 
                            // by 1
                            for(pair<int, int> node:this->adj[u]){
                                indegree[node.first]--;
                                // if the indegree of the node is 0
                                if(indegree[node.first]==0){
                                    // push it to the queue
                                    q.push(node.first);
                                }
                            }
                        }
                        // return the topSortOrdering        
                        return topSortOrdering;
                    }
                    //find all the shortest path distances
                    void findShortestPathInDAG(int src){
                        // distance vector from the src node
                        vector<int> distances(V, INT_MAX);
                        // find the topSort ordering        
                        vector<int> topSortOrdering = topSort(src);
                        // initially mark the distance from the source node to itself as 0
                        distances[src]=0;
                        // for each vertex in topSortOrdering
                        for(int x:topSortOrdering){
                            // if current vertex weight is not INT_MAXinity
                            if(distances[x]!=INT_MAX){
                                // traverse all the adjacent Edges
                                for(pair<int, int> adjNode : this->adj[x]){
                                    // relax the edges
                                    if(distances[adjNode.first] > distances[x]+adjNode.second){
                                        distances[adjNode.first] = distances[x]+adjNode.second;
                                    }
                                }   
                            }
                        }
                        // print the final distances
                        cout<<"The distances from the src node are: ";
                        for(int i=0;i<V;++i){
                            if(distances[i]==INT_MAX) cout<<"INF ";
                            else cout<<distances[i]<<" ";
                        }
                    }
                };
                int main() {
                    // Number of Edges and Vertices
                    int num_vertices = 6;
                    int num_edges = 9;
                    Graph G(num_vertices, num_edges); // Graph G
                    // add all edges to graph
                    G.addEdge(1, 3, 6);
                    G.addEdge(1, 2, 2);
                    G.addEdge(0, 1, 5);
                    G.addEdge(0, 2, 3);
                    G.addEdge(3, 4, -1);
                    G.addEdge(2, 4, 4);
                    G.addEdge(2, 5, 2);
                    G.addEdge(2, 3, 7);
                    G.addEdge(4, 5, -2);
                    // compute the Shortest_path
                    int src = 1; 
                    G.findShortestPathInDAG(src);
                    return 0;
                }
